package com.shpandrak.codegen.util;

import com.shpandrak.codegen.model.*;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * Created with love
 * User: shpandrak
 * Date: 10/17/12
 * Time: 00:40
 */
public class GeneratedClassPrinter {
    private static final Logger logger = LoggerFactory.getLogger(GeneratedClassPrinter.class);

    private GeneratedClass generatedClass;
    private String rootDir;

    public GeneratedClassPrinter(GeneratedClass generatedClass, String rootDir) {
        this.generatedClass = generatedClass;
        this.rootDir = rootDir;
    }

    public void generate() throws IOException {
        StringBuilder classString = generateClass(generatedClass);
        File javaClassFile = new File(rootDir +
                generatedClass.getPackageName().replaceAll("\\.", "/") + "/" + generatedClass.getName() + ".java");

        logger.info("Generating class {} to {}", generatedClass.getFullClassName(), javaClassFile.getAbsolutePath());
        FileUtils.writeStringToFile(javaClassFile, classString.toString());

    }

    public static StringBuilder generateClass(GeneratedClass c) {

        StringBuilder sb = new StringBuilder();
        sb.append("package ").append(c.getPackageName()).append(";\n\n");
        for (String currImport : c.getImports()) {
            sb.append("import ").append(currImport).append(";\n");
        }
        sb.append('\n');
        sb.append("/**\n * Generated By Shpandrak\n */\n");



        for (GeneratedAnnotation currAnnotation : c.getAnnotations().values()) {
            currAnnotation.print(sb);
            sb.append('\n');
        }

        boolean hasClassPrefix = false;
        if (c.getModifier() != null){
            sb.append(c.getModifier().toString().toLowerCase());
            hasClassPrefix = true;
        }

        if (c.isAbstractClass()){
            if (hasClassPrefix){
                sb.append(' ');
            }
            sb.append("abstract");
            hasClassPrefix = true;
        }
        if (c.isFinalClass()){
            if (hasClassPrefix){
                sb.append(' ');
            }
            sb.append("final");
            hasClassPrefix = true;
        }
        if (hasClassPrefix){
            sb.append(' ');
        }

        if (c instanceof GeneratedEnum) {
            generateEnumBody((GeneratedEnum) c, sb);

        } else {
            generateClassBody(c, sb);
        }
        return sb;

    }

    private static void generateEnumBody(GeneratedEnum e, StringBuilder sb) {
        sb.append("enum ").append(e.getName());
        sb.append(" {\n");

        // Printing values
        int idx = 0;
        for (GeneratedEnumValue currEnumValue : e.getValues()) {
            sb.append('\t').append(currEnumValue.getName());
            ++idx;
            if (idx != e.getValues().size()){
                sb.append(',');
            }else {
                sb.append(';');
            }
            sb.append('\n');
        }
        sb.append('}');
    }

    private static void generateClassBody(GeneratedClass c, StringBuilder sb) {
        sb.append("class ").append(c.getName());
        if (c.getExtendsClassType() != null) {
            sb.append(" extends ");
            c.getExtendsClassType().print(sb);
        }

        Map<String, ClassGeneratedType> implementedInterfaces = c.getImplementedInterfaces();
        if (!implementedInterfaces.isEmpty()) {
            sb.append(" implements ");
            boolean first = true;
            for (ClassGeneratedType currImplementedInterface : implementedInterfaces.values()) {
                if (first) {
                    first = false;
                } else {
                    sb.append(", ");
                }
                currImplementedInterface.print(sb);
            }
        }

        sb.append(" {\n");

        // Printing members
        List<GeneratedMethod> gettersAndSetters = new ArrayList<GeneratedMethod>();
        for (GeneratedClassMember currMember : c.getMembers()) {
            sb.append('\t').append(currMember.getModifier().name().toLowerCase()).append(' ');
            if (currMember.isStaticMember()){
                sb.append("static ");
            }
            if (currMember.isFinalMember()){
                sb.append("final ");
            }

            currMember.getType().print(sb);
            sb.append(' ').append(currMember.getName());

            if (currMember.getInitializer() != null) {
                sb.append(" = ").append(currMember.getInitializer().getCode()).append('\n');
            } else {
                sb.append(";\n");
            }

            // Generating getter
            if (currMember.isGetter()) {
                String getterName;
                getterName = generateGetterName(currMember);

                gettersAndSetters.add(new GeneratedMethod(getterName, GeneratedModifier.PUBLIC,
                        Collections.<GeneratedParameter>emptyList(),
                        currMember.getType(),
                        Collections.<ClassGeneratedType>emptyList(),
                        Collections.<GeneratedAnnotation>emptyList(),
                        false, new GeneratedBody(Arrays.asList(new GeneratedCodeLine("return " + currMember.getName() + ";")))));
            }

            // Generating Setter
            if (currMember.isSetter()) {
                String setterName = "set" + currMember.getName().substring(0, 1).toUpperCase() + currMember.getName().substring(1);
                gettersAndSetters.add(new GeneratedMethod(setterName,
                        GeneratedModifier.PUBLIC,
                        Arrays.asList(new GeneratedParameter(currMember.getName(), currMember.getType())),
                        new GeneratedType("void"),
                        Collections.<ClassGeneratedType>emptyList(),
                        Collections.<GeneratedAnnotation>emptyList(),
                        false, new GeneratedBody(Arrays.asList(
                                new GeneratedCodeLine("this." + currMember.getName() + " = " + currMember.getName() + ";")))));
            }
        }
        sb.append('\n');

        for (GeneratedBody currStaticBlock : c.getStaticCodeBlocks()){
            if (!currStaticBlock.getLines().isEmpty()){
                sb.append("\tstatic {\n");
                for (GeneratedCodeLine currLine : currStaticBlock.getLines()){
                    sb.append("\t\t").append(currLine.getCode()).append('\n');
                }
                sb.append("\t}\n");
            }
            sb.append('\n');
        }



        // Generating constructor
        for (GeneratedConstructor currConstructor : c.getConstructors()) {
            generateMethod(c, currConstructor, sb);
        }

        // Generating methods
        for (GeneratedMethod currMethod : c.getMethods()) {
            generateMethod(c, currMethod, sb);
        }

        // Generate getters and setters
        for (GeneratedMethod currMethod : gettersAndSetters) {
            generateMethod(c, currMethod, sb);
        }


        sb.append('}');
    }

    public static String generateGetterName(GeneratedClassMember currMember) {
        return generateGetterName(currMember.getName(), currMember.getType().getType());
    }

    public static String generateGetterName(String memberName, String typeName) {
        String getterName;
        if (typeName.equalsIgnoreCase("boolean")) {
            getterName = "is" + memberName.substring(0, 1).toUpperCase() + memberName.substring(1);
        } else {
            getterName = "get" + memberName.substring(0, 1).toUpperCase() + memberName.substring(1);
        }
        return getterName;
    }

    private static void generateMethod(GeneratedClass c, GeneratedMethod currMethod, StringBuilder sb) {
        for (GeneratedAnnotation currAnnotation : currMethod.getAnnotations().values()) {
            sb.append('\t');
            currAnnotation.print(sb);
            sb.append('\n');
        }


        sb.append("\t");
        if (currMethod.getModifier() != null){
            sb.append(currMethod.getModifier()).append(' ');
        }

        if (currMethod.isStaticMethod()){
            sb.append("static ");
        }
        if (currMethod.getReturnType() == null) {
            if (!(currMethod instanceof GeneratedConstructor)) {
                throw new IllegalArgumentException("Encountered method with no return type which is not a constructor. method:" + currMethod.getName() + ", class:" + c.getFullClassName());
            }
        } else {
            currMethod.getReturnType().print(sb);
            sb.append(' ');
        }

        sb.append(currMethod.getName()).append('(');
        boolean first = true;
        for (GeneratedVariable currParam : currMethod.getParams()) {
            if (first) {
                first = false;
            } else {
                sb.append(", ");
            }
            currParam.print(sb);
        }

        sb.append(")");
        List<ClassGeneratedType> throwsList = currMethod.getThrowsList();
        if (!throwsList.isEmpty()) {
            sb.append(" throws ");
            first = true;
            for (ClassGeneratedType currThrowable : throwsList) {
                if (first) {
                    first = false;
                } else {
                    sb.append(", ");
                }
                currThrowable.print(sb);
            }
        }


        sb.append(" {\n");
        for (GeneratedCodeLine currLine : currMethod.getBody().getLines()) {
            sb.append("\t\t").append(currLine.getCode()).append('\n');
        }
        sb.append("\t}\n\n");
    }

}
